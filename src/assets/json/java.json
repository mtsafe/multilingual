{
  "about": {
    "phylogeny": "derives from C/C++ but without pointers",
    "class based": true,
    "OOP": true,
    "automatic garbage collection": true,
    "static type-checking": "at compile time and runtime",
    "compiled": "into bytecode",
    "interpreted": false,
    "multi-threading": true,
    "platform independent": true,
    "environment": "runs in a virtual machine",
    "programming paradigms": {
      "encapsulation": "data and methods are bundled into classes",
      "inheritance": "an object of a class acquires properties and behaviors of parent classes",
      "information hiding": "information can be restricted to reduce interconnectiveness of a system",
      "polymorphism": "a parent class reference can refer to child class objects and child class objects can inherit from multiple parent classes"
    },
    "platforms": {
      "Java SE": "provides core functionalities and high-level classes for networking, security, database and GUI",
      "Java EE": "includes Java SE and suitable for enterprise-scale apps",
      "Java ME": "a subset of Java SE and suitable for small devices like phones",
      "Java FX": "for internet apps using lightweight UI using accelerated graphics and media engines and using high-level APIs for networked data sources"
    },
    "file extensions": {
      ".class": "compiled code",
      ".jar": "executable within a JVM",
      ".java": "source code"
    },
    "standard packages": {
      "java.applet": "applet support embedded in an HTML document",
      "java.awt": "Abstract Windowing Toolkit for GUI",
      "java.io": "file i/o",
      "java.lang": "basic language support",
      "java.net": "supports TCP/IP",
      "java.util": "miscellaneous classes",
      "java.sql": "database (JDBS)"
    }
  },
  "memory management": {
    "stack management": "stack memory allocated per thread",
    "heap management": "heap memory holds objects for the JVM"
  },
  "comments": [
    { "single-line": "begins with double slash as:\n\t// the comment" },
    { "multi-line": "enclosed as\n\t/* the comment */" },
    {
      "documentation comment": "enclosed as\n\t/** the documentation comment */"
    }
  ],
  "loops": [
    {
      "while": "while (condition) {\n\tstatement(s)\n}"
    },
    {
      "for": "for (initialization; condition; increment/decrement) {\n\tstatement(s)\n}"
    },
    {
      "do...while": "do {\n\tstatement(s)\n} while (condition);"
    }
  ],
  "loop control statements": [
    {
      "break": "execution jumps to the first statement following the loop"
    },
    {
      "continue": "execution jumps to the end of the group of statements in the loop"
    }
  ],
  "operators": [
    {
      "primitive": [
        {
          "assignment": [
            { "=": "value assignment" },
            { "+=": "addition assignment" },
            { "-=": "subtraction assignment" },
            { "*=": "multiplication assignment" },
            { "/=": "division assignment" },
            { "%=": "modulo assignment" }
          ],
          "concatenation": {
            "+": "char and/or String concatenation resulting in String"
          },
          "math": [
            {
              "arithmetic": [
                { "+": "addition" },
                { "-": "subtraction" },
                { "*": "multiplication" },
                { "/": "division" },
                { "%": "modulo" }
              ]
            },
            {
              "unary": [
                { "++": "increment prefix or postfix" },
                { "--": "decrement prefix or post fix" }
              ]
            }
          ]
        }
      ]
    }
  ],
  "variables": [
    {
      "types": [
        { "int": "integer" },
        { "double": "double precision floating point" },
        { "char": "character" },
        { "String": "text string class" },
        { "Boolean": "\"true\" or \"false\"" }
      ]
    }
  ]
}
